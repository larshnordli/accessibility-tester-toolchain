var webdriver = require("selenium-webdriver");
var request = require("request");
var FRAME_FUNC =
    "function getFrameWinHelp(rootWin, startIdx, searchIdx) { " +
    "if (startIdx == searchIdx) " +
    "return rootWin; " +
    "startIdx = startIdx+1;" +
    "for (var i=0; i<rootWin.frames.length; ++i) {" +
    "var result = getFrameDocHelp(rootWin.frames[i], startIdx, searchIdx);" +
    "if (typeof result == typeof 3) " +
    "startIdx = result;" +
    "else return result;" +
    "}" +
    "return startIdx;" +
    "}" +
    "function getFrameWin() {" +
    "try {" +
    "return getFrameWinHelp(window, 0, arguments[0]);" +
    "} catch(e) {" +
    "console.log(e);" +
    "return null; }" +
    "}";

var SeleniumWrapper = function (aatLog, bluemixConfig, driver, params) {
    var doProfile = false;
    if (!bluemixConfig) {
        doProfile = true;
        bluemixConfig = {
            "rule_endpoint" : "https://pages.github.ibm.com/IBMa/IBM-RulePages/js/latest/"
        }
    } else if (!bluemixConfig["rule_endpoint"] && bluemixConfig["endpoint"]) {
        bluemixConfig["rule_endpoint"] = bluemixConfig.endpoint+"tool/c64ac3ac-07e2-409b-a5f7-b893e4ac120e/"+bluemixConfig.instanceId+"/";
    }

    driver.config = params || {};

    driver.getNumFrames = function () {
        return driver.executeScript("function countFrames(rootWin) { var retVal = 1;for (var i=0; i<rootWin.frames.length; ++i) { retVal += countFrames(rootWin.frames[i]); } return retVal; } return countFrames(window)");
    }

    driver.getFrameTitle = function (i) {
        return driver.executeScript(
            FRAME_FUNC +
            "var doc = getFrameWin(arguments[0]).document;" +
            "if (doc == null) return null;" +
            "return doc.title;", i);
    }

    function addScreenshot(pageResults, label, cb) {
        if (aatLog) {
            driver.getCurrentUrl().then(function (url) {
                if (driver.config.takeScreenshot && driver.takeScreenshot) {
                    driver.takeScreenshot().then(function (image, err) {
                        aatLog.log(pageResults, url, label, image, cb);
                    });
                } else {
                    aatLog.log(pageResults, url, label, cb);
                }
            });
        }
    }
    
    var scanTimes = [];
    function profile(time) {
        scanTimes.push(time);
    }
    if (doProfile) {
        var sendLogs = function(done) {
            try {
                if (this.timeout) {
                    this.timeout(0);
                }

                if (scanTimes.length > 0) {
                    var qs = "?p=seleniumjs&s=aat&res=";
                    scanTimes.forEach(function(t) {
                        qs += "OK,";
                    });
                    qs = qs.substr(0,qs.length-1);
                    qs += "&qt=";
                    scanTimes.forEach(function(t) {
                        qs += "0,";
                    });
                    qs = qs.substr(0,qs.length-1);
                    qs += "&st=";
                    scanTimes.forEach(function(t) {
                        qs += t;
                        qs += ",";
                    });
                    qs = qs.substr(0,qs.length-1);
                    qs += "&t=";
                    scanTimes.forEach(function(t) {
                        qs += "rs,";
                    });
                    qs = qs.substr(0,qs.length-1);
                    scanTimes = [];
                    request.get("http://ibmac96.austin.ibm.com/cgi-bin/log-cio/log.py"+qs, function() {
                        if (done) done();
                    });
                } else {
                    if (done) done();
                }
            } catch (e) {
                if (done) done(e);
            }
        }
        if (typeof(after) !== "undefined") {
            after(sendLogs);
        } else {
            process.on('beforeExit', sendLogs);
        }
    }

    driver.getCompliance = function (iFrame, label) {
        var startTime = new Date().getTime();
        function count(pageResults) {
            var retVal = {
                "counts" : {
                },
                "reports" : pageResults
            }
            
            if (driver.config.filterMap) {
                for (var key in driver.config.filterMap) {
                    retVal.counts[key] = 0;
                }
            } else {
                retVal.counts = {
                    "level.violation" : 0,
                    "level.potentialviolation" : 0,
                    "level.recommendation" : 0,
                    "level.potentialrecommendation" : 0,
                    "level.manual" : 0
                };
            }
            
            pageResults.forEach(function(pageResult) {
                if (pageResult.report.forEach) {
                    pageResult.report.forEach(function(item) {
                        if (item.level in retVal.counts) {
                            ++retVal.counts[item.level];
                        } 
                    });
                }
            });
            return retVal;        
        }

        var d1 = webdriver.promise.defer();

        if (typeof (iFrame) !== "undefined" && iFrame != null && iFrame >= 0) {
            getComplianceFrame(iFrame).then(function (return_success) {
                var pageResults = [{ "frameIdx": iFrame, "report": return_success }];
                addScreenshot(pageResults, label, function() {
                    var endTime = new Date().getTime();
                    profile(endTime-startTime);
                    d1.fulfill(count(pageResults));
                });
            });
        } else {
            driver.getNumFrames().then(function (numFrames) {
                var pageResults = [];
                function addFrame(idx) {
                    getComplianceFrame(idx).then(function (return_success) {
                        pageResults.push({ "frameIdx": idx, "report": return_success });
                        ++idx;
                        if (idx == numFrames) {
                            addScreenshot(pageResults, label, function () {
                                var endTime = new Date().getTime();
                                profile(endTime-startTime);
                                d1.fulfill(count(pageResults));
                            });
                        } else {
                            addFrame(idx);
                        }
                    });
                }
                addFrame(0);
            });
        }
        return d1;
    };

    function getComplianceFrame(i) {
        driver.manage().timeouts().setScriptTimeout(1000 * 60 * 60 * 24);//1, TimeUnit.DAYS);
        var scriptStr = FRAME_FUNC +
            "try {" +
            "var callback = arguments[arguments.length - 1];" +
            "var win = getFrameWin(arguments[0]);" +
            "var frameHidden = false;" +
            "if (win.frameElement) {" +
            "var cs = window.getComputedStyle(win.frameElement);" +
            "if (cs.visibility=='hidden' || cs.display=='none') {" +
            "frameHidden = true;" +
            "}" +
            "}" +
            "var doc = win.document;" +
            "if (doc == null) callback(null);" +
            "if ('undefined' != typeof(IBMa) && IBMa.validate) {" +
            "IBMa.validate(doc, " + JSON.stringify(driver.config.policies) + ", function(data) { " +
            "if (frameHidden) {" +
            "data.report.fail.forEach(function(item) {" +
            "item.visible = false;" +
            "});" +
            "}" +
            "callback(data.report.fail); " +
            "});" +
            "} else {" +
            "var script = document.createElement('script');" +
            "script.setAttribute('type', 'text/javascript');" +
            "script.setAttribute(\"IBMa\", \"CCE\");" +
            "script.setAttribute('src', '" + bluemixConfig.rule_endpoint + "engine-browser.js');" +
            "script.addEventListener('load', function() {" +
            "IBMa.GSALoader.ROOTURL = \"" + bluemixConfig.rule_endpoint + "\";" +
            "IBMa.validate(doc, " + JSON.stringify(driver.config.policies) + ", function(data, policies) { " +
            "if (frameHidden) {" +
            "data.report.fail.forEach(function(item) {" +
            "item.visible = false;" +
            "});" +
            "}" +
            "callback(data.report.fail); " +
            "});" +
            "}, false);" +
            "var heads = document.getElementsByTagName('head');" +
            "if (heads.length > 0) heads[0].appendChild(script);" +
            "else document.body.appendChild(script);" +
            "}" +
            "} catch (e) { callback(e); }";

        return driver.executeAsyncScript(scriptStr, i).then(function (return_success) {
            for (var i = 0; i < return_success.length; ++i) {
                if (return_success && !driver.config.includeHidden) {
                    if (!return_success[i].visible) {
                        return_success.splice(i--, 1);
                        continue;
                    }
                }
                if (driver.config.filterMap) {
                    if (!(return_success[i].levelCode in driver.config.filterMap)) {
                        return_success.splice(i--, 1);
                        continue;
                    }
                }
            }
            return return_success;
        });
    }

    return driver;
}

module.exports = SeleniumWrapper;