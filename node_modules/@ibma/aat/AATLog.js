var request = require("request");

/**
 * config : {
 *      "projectId" : 
 *      "instanceId" : // Either the projectId or the instanceId must be specified
 *      "instanceUser" : 
 *      "instancePass" : 
 *      "endpoint" : 
 *      "pem" : (optional)
 *      "persist" : (optional) (default: true)
 * }
 */
module.exports = function(config) {
    return new AATLogger(config);
}

var AATLogger = function(config) {
    if (typeof(config) === typeof("")) {
        config = require(config);
    }
    this.config = config;
    this.inSession = false;

    process.on('beforeExit', this.exitHandler.bind(null));
    
    this.options = {
        "auth": {
            "user": this.config.instanceUser,
            "pass": this.config.instancePass
        }
    };
    if (this.config.pem) {
        this.options.agentOptions = {
            "ca" : this.config.pem
        }
    }
}

AATLogger.prototype.exitHandler = function(options, err) {
    var myThis = this;
    if (myThis.inSession) {
        myThis.myput("sessions/"+this.sessionId+"/endSession?autoClose=true",
            function(error, response, body) {
                console.log("Exit", body);
                myThis.inSession = false;
            }
        ).json({});
    };
}

AATLogger.prototype.mypost = function(relUrl, callback) {
    return request.post(this.config.endpoint+relUrl,
        this.options,
        callback);
}

AATLogger.prototype.myput = function(relUrl, callback) {
    return request.put(this.config.endpoint+relUrl,
        this.options,
        callback);
}

AATLogger.prototype.meter = function() {
    this.mypost(
        "scans/meter/827828f1-9aad-4a1e-a37f-7ac004dff778?instanceId="+this.config.instanceId
    ).json({});
}
    
AATLogger.prototype.logToSession = function(post, cb) {
    this.mypost(
        "scans?sessionId="+this.sessionId,
        function(error, response, body) {
            if (!body || body.result !== "SUCCESS") {
                console.error("Unable to save scan to Automated Accessibility Tester");
                console.error(body);
            }
            if (cb) cb();
        }
    ).json(post);
}
    
AATLogger.prototype.log = function(reports, uri, label, screenshot, cb) {
    for (var i=0; i<arguments.length; ++i) {
        if (typeof arguments[i] === "function") {
            cb = arguments[i];                
        }
    }
    var post = {
        "version" : 2,
        "uri" : uri,
        "reports" : reports
    };
    if (!this.config.projectId || this.config.persist === false) {
        this.meter();
    } else {
        if (label) {
            post.label = label;
        }
        
        if (screenshot) {
            post.screenshot = screenshot;
        }
                
        if (!this.inSession) {
            this.inSession = true;
            // Start session
            var myThis = this;
            this.mypost("sessions?projectId="+this.config.projectId+"&name="+new Date().getTime(),
                function(error, response, body) {
                    if (body.result == "SUCCESS") {
                        myThis.sessionId = body.sessionId;
                        myThis.logToSession(post, cb);
                    } else {
                        console.error("Unable to create session for Automated Accessibility Tester");
                        console.error(body);
                    }
                }
            ).json({});
        } else {
            this.logToSession(post, cb);
        }
    }
}