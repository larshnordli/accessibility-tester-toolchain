{
  "_args": [
    [
      "@ibma/aat@https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
      "/Users/thbrunet/Tom/Dev/Git/AAT-Demo"
    ],
    [
      {
        "raw": "@ibma/aat@https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
        "scope": "@ibma",
        "escapedName": "@ibma%2faat",
        "name": "@ibma/aat",
        "rawSpec": "https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
        "spec": "https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
        "type": "remote"
      },
      "C:\\dev\\accessibility-tester-toolchain"
    ]
  ],
  "_from": "https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
  "_id": "@ibma/aat@1.0.7",
  "_inCache": true,
  "_installable": true,
  "_location": "/@ibma/aat",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@ibma/aat@https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
    "scope": "@ibma",
    "escapedName": "@ibma%2faat",
    "name": "@ibma/aat",
    "rawSpec": "https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
    "spec": "https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
  "_shasum": "6775e96c4e36ef1ffcce07d26182a5af3278fcb4",
  "_shrinkwrap": null,
  "_spec": "@ibma/aat@https://ecs-dashboard.mybluemix.net/dist/aat.tgz",
  "_where": "C:\\dev\\accessibility-tester-toolchain",
  "author": {
    "name": "IBMa"
  },
  "dependencies": {
    "promise": "^7.1.1",
    "request": "^2.69.0"
  },
  "description": "Automated Accessibility Tester",
  "devDependencies": {},
  "license": "SEE LICENSE IN README",
  "main": "index.js",
  "name": "@ibma/aat",
  "optionalDependencies": {},
  "readme": "#Automated Accessibility Tester\n\nSee [Terms](https://www-03.ibm.com/software/sla/sladb.nsf/sla/bm-6620-01?Open&cm_mc_uid=15176199089014551186427&cm_mc_sid_50200000=1463172947).\n\nThe Automated Accessibility Tester currently provides wrappers for: \n* Selenium\n* Zombie\n* DOM\n\nThe scanner will support integration with the IBM [Automated Accessibility Tester](https://ibm.biz/bluemix-aat) for Bluemix.\nThis integration currently only works through the US stage1 server.\n\nIf using Selenium without Bluemix, the Selenium server must have visibility to\nhttps://pages.github.ibm.com/IBMa/IBM-RulePages/*\n\n## For each of these tools, the result follows a format similar to:\n```\n{ \n    \"counts\": {\n        \"level.violation\": 0,\n        \"level.potentialviolation\": 0,\n        \"level.recommendation\": 0,\n        \"level.potentialrecommendation\": 0,\n        \"level.manual\": 0\n    },\n    \"reports\" : [\n        {\n            \"frameIdx\" : 0,\n            \"report\" : [\n                { \n                    \"severity\": 'High',\n                    \"severityCode\": 'eISHigh',\n                    \"message\": 'All content must reside within a WAI-ARIA landmark or labelled region role.',\n                    \"messageCode\": 'wcag20.tech.aria.OrphanedContent',\n                    \"ruleId\": '1088',\n                    \"help\": 'idhi_accessibility_check_g1088.html',\n                    \"component\": '/html[1]/body[1]/div[1]/div[5]/div[1]/a[1]',\n                    \"displayId\": 'Rpt_Aria_OrphanedContent',\n                    \"msgArgs\": [],\n                    \"visible\": true,\n                    \"bounds\": { left: 0, top: 0, height: 0, width: 0 },\n                    \"rsInfo\": \n                    [ \n                        {\n                            rs: {\n                                id: 'CI162_5_2_DCP080115',\n                                label: 'IBM CI162 Web Checklist (v5.2) Plan DCP, 01 August 2015 or later' \n                            },\n                            requirement: {\n                                id: '2.4a',\n                                label: 'Navigational Features: A mechanism is available to bypass blocks of content that are repeated on multiple Web pages.',\n                                level: 'A' \n                            },\n                            levelCode: 'level.potentialviolation' \n                        }                        \n                    ],\n                    \"level\": 'level.violation' \n                }\n            ]\n        }\n    ]\n}\n```\n  \n## Scanning using DOM\n\n```\nvar options = {\n    \"policies\" : \"CI162_5_2_DCP080115\n};\nvar aat = require(\"@ibma/aat\")(null, options);\nvar scanner = aat.Scan();\nscanner.getCompliance(doc).then(function(result) {\n    // See format above\n});\n```\n\nIn this scenario, doc may be any DOM document obtained in a variety of ways (e.g., jsdom, zombie, etc). \n\n## Scanning using Zombie\n\n```\nvar zombie = require(\"zombie\");\nvar options = {\n    \"policies\" : \"CI162_5_2_DCP080115\n};\nvar aat = require(\"@ibma/aat\")(null, options);\nvar driver = aat.Zombie(new zombie());\n\ndriver.visit('http://www.google.com', function() {\n    driver.getCompliance().then(function(return_value) {\n        // See format above\n    });\n});\n```\n\n## Scanning using Selenium\nNote below that the id being used is IBM\\_ as opposed to CI162\\_. The IBM\\_ ruleset includes two color contrast checking rules that were deployed for Bluemix. Will pull in the more standard internal rulesets soon.\n```\nvar configPath = __dirname+\"/dashboard-config.json\";\n\nvar options = {\n    // optional - Policies to scan. Default is all policies.\n    \"policies\" : [\"IBM_DCP080115\"],\n    // optional - flag to include hidden content, default false\n    \"includeHidden\" : false, \n    // optional - if level is in the map with any value, it will be included.\n    // Default includes all levels\n    \"filterMap\" : {  \n        \"level.violation\" : true,\n        \"level.potentialviolation\" : true,\n        \"level.recommendation\" : true,\n        \"level.potentialrecommendation\" : true,\n        \"level.manual\" : true\n    }\n}\n\nvar bmConfig = JSON.parse(fs.readFileSync(configPath));\nvar aat = require(\"@ibma/aat\")(null, options);\nvar driver = aat.Selenium(seleniumDriver);\n\ndriver.get('http://www.google.com/ncr');\ndriver.getCompliance().then(function(return_value) {\n    // See format above\n}\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.7"
}
