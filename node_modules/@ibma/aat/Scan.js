var request = require("request");
var Checker = require("./Checker");
//Checker.GSALoader.useCache = true;
//checker.Config.DEBUG=true;
//Checker.Config.includeBounds=false;
//checker.Config.includeVisibility=false;
//Checker.Config.includeNodes=false;
//checker.Config.includePassed=true;
var Promise = require("promise");

var ScanWrapper = function (aatLog, bluemixConfig, params) {
    var doProfile = true;
    if (bluemixConfig) {
        doProfile = false;
        Checker.GSALoader.ROOTURL = bluemixConfig.endpoint+"tool/c64ac3ac-07e2-409b-a5f7-b893e4ac120e/"+bluemixConfig.instanceId+"/";
    }
    if (params.pem) {
        Checker.Config.pem = params.pem;
    }
    
    
    var scanTimes = [];
    function profile(time) {
        scanTimes.push(time);
    }
    if (doProfile) {
        var sendLogs = function(done) {
            try {
                if (this.timeout) {
                    this.timeout(0);
                }
                if (scanTimes.length > 0) {
                    var qs = "?p=scanjs&s=aat&res=";
                    scanTimes.forEach(function(t) {
                        qs += "OK,";
                    });
                    qs = qs.substr(0,qs.length-1);
                    qs += "&qt=";
                    scanTimes.forEach(function(t) {
                        qs += "0,";
                    });
                    qs = qs.substr(0,qs.length-1);
                    qs += "&st=";
                    scanTimes.forEach(function(t) {
                        qs += t;
                        qs += ",";
                    });
                    qs = qs.substr(0,qs.length-1);
                    qs += "&t=";
                    scanTimes.forEach(function(t) {
                        qs += "rs,";
                    });
                    qs = qs.substr(0,qs.length-1);
                    scanTimes = [];
                    request.get("http://ibmac96.austin.ibm.com/cgi-bin/log-cio/log.py"+qs, function() {
                        if (done) done();
                    });
                } else {
                    if (done) done();
                }
            } catch (e) {
                if (done) done(e);
            }
        }
        if (typeof(after) !== "undefined") {
            after(sendLogs);
        } else {
            process.on('beforeExit', sendLogs);
        }
    }

    return {
        "getCompliance" : function(document) {
            var startTime = new Date().getTime();
            function count(pageResults) {
                var retVal = {
                    "counts" : {
                    },
                    "reports" : pageResults
                }
                
                if (params.filterMap) {
                    for (var key in params.filterMap) {
                        retVal.counts[key] = 0;
                    }
                } else {
                    retVal.counts = {
                        "level.violation" : 0,
                        "level.potentialviolation" : 0,
                        "level.recommendation" : 0,
                        "level.potentialrecommendation" : 0,
                        "level.manual" : 0
                    };
                }
                pageResults.forEach(function(pageResult) {
                    pageResult.report.forEach(function(item) {
                        if (item.level in retVal.counts) {
                            ++retVal.counts[item.level];
                        } 
                    });
                });
                return retVal;        
            }
            return new Promise(function(resolve, reject) {
                var doc = document;
                if (doc == null) reject("No document");
                Checker.validate(doc, params.policies, function(data) {
                    if (!data.report) {
                        reject(data);
                        return;
                    }
                    var return_success = [{ "frameIdx" : "-1", "report" : data.report.fail }];
                    for (var i=0;i<return_success[0].report.length; ++i) {
                        if (return_success[0].report && !params.includeHidden) {
                            if (!return_success[0].report[i].visible) {
                                return_success[0].report.splice(i--,1);
                                continue;
                            }
                        }
                        if (params.filterMap) {
                            if (!(return_success[0].report[i].levelCode in params.filterMap)) {
                                return_success[0].report.splice(i--,1);
                                continue;
                            }
                        }
                    }
                    var endTime = new Date().getTime();
                    profile(endTime-startTime);
                    resolve(count(return_success));
                    if (aatLog) {
                        aatLog.log(return_success, document.location.href);
                    }
                });
            });
        }
    }
};

module.exports = ScanWrapper;